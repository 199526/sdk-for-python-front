parameters:
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: BuildTargetingString
    type: string
    default: 'azure-*'
  - name: ServiceDirectory
    type: string
    default: ''
  - name: BuildDocs
    type: boolean
    default: true

steps:
  - ${{if eq(parameters.TestPipeline, 'true')}}:
    - task: PowerShell@2
      displayName: Prep template pipeline for release
      condition: succeeded()
      inputs:
        pwsh: true
        workingDirectory: $(Build.SourcesDirectory)
        filePath: eng/scripts/SetTestPipelineVersion.ps1
        arguments: '-BuildID $(Build.BuildId)'

  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: 'Tag scheduled builds'
    condition: and(eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

  - task: UsePythonVersion@0
    displayName: 'Use Python 2.7'
    inputs:
      versionSpec: '2.7'

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Py2 Environment'

  - task: PythonScript@0
    displayName: 'Generate Python2 Applicable Namespace Packages'
    inputs:
      scriptPath: 'scripts/devops_tasks/build_packages.py'
      arguments: '-d "$(Build.ArtifactStagingDirectory)" "${{ parameters.BuildTargetingString }}" --pkgfilter="nspkg" --service=${{parameters.ServiceDirectory}}'

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PythonVersion)'
    inputs:
      versionSpec: $(PythonVersion)

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Environment'

  - template: ../steps/set-dev-build.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}

  - task: PythonScript@0
    displayName: 'Generate Packages'
    inputs:
      scriptPath: 'scripts/devops_tasks/build_packages.py'
      arguments: '-d "$(Build.ArtifactStagingDirectory)" "${{ parameters.BuildTargetingString }}" --service=${{parameters.ServiceDirectory}} --devbuild="$(SetDevVersion)"'

  - script: |
      twine check $(Build.ArtifactStagingDirectory)/**/*.whl
      twine check $(Build.ArtifactStagingDirectory)/**/*.zip
    displayName: 'Verify Readme'

  - task: PythonScript@0
    displayName: 'Generate Docs'
    condition: and(succeededOrFailed(), ${{parameters.BuildDocs}})
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv=sphinx

  - ${{ parameters.BeforePublishSteps }}

  - pwsh: |
      Write-Host "${{ parameters.BuildDocs }}"

      # handle where the parameter is undefined
      $shouldPublishDocs = $true
      $docParam = "${{ parameters.BuildDocs }}"
      if ($docParam) {
        # if we set it to false handle it here
        $shouldPublishDocs = 	[System.Convert]::ToBoolean($docParam)
      }

      $filesInDocs = (Test-Path '$(Build.SourcesDirectory)/_docs')
      # error if no packages to publish
      if ($filesInDocs -gt 0)

      $docsPublishes = ((Get-ChildItem '$(Build.SourcesDirectory)/_docs') | Measure-Object).Count
      $packagePublishes = ((Get-ChildItem '$(Build.ArtifactStagingDirectory)') | Measure-Object).Count

      
      if ($shouldPublishDocs -and $docsPublishes -eq 0) {
        Write-Host "We are expecting to publish documentation artifacts, but no documentation artifacts were found."
        Write-Host (Get-ChildItem '$(Build.SourcesDirectory)/_docs')
        exit 0
      }
    displayName: 'Verify Presence of Artifacts'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Package Artifacts'
    inputs:
      artifactName: 'packages'
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), ${{ parameters.BuildDocs }})
    displayName: 'Publish Documentation Artifacts'
    inputs:
      artifactName: 'documentation'
      pathtoPublish: '$(Build.SourcesDirectory)/_docs'
