# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AllocationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the Pool is resizing.
    """

    STEADY = "steady"  #: The Pool is not resizing. There are no changes to the number of Compute Nodes in the Pool in progress. A Pool enters this state when it is created and when no operations are being performed on the Pool to change the number of Compute Nodes.
    RESIZING = "resizing"  #: The Pool is resizing; that is, Compute Nodes are being added to or removed from the Pool.
    STOPPING = "stopping"  #: The Pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.

class AutoUserScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value is pool. If the pool is running Windows a value of Task should be specified
    if stricter isolation between tasks is required. For example, if the task mutates the registry
    in a way which could impact other tasks, or if certificates have been specified on the pool
    which should not be accessible by normal tasks but should be accessible by StartTasks.
    """

    TASK = "task"  #: Specifies that the service should create a new user for the Task.
    POOL = "pool"  #: Specifies that the Task runs as the common auto user Account which is created on every Compute Node in a Pool.

class CachingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value for caching is none. For information about the caching options see:
    https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-
    disks-and-images/.
    """

    NONE = "none"  #: The caching mode for the disk is not enabled.
    READ_ONLY = "readonly"  #: The caching mode for the disk is read only.
    READ_WRITE = "readwrite"  #: The caching mode for the disk is read and write.

class CertificateFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The format of the Certificate data.
    """

    PFX = "pfx"  #: The Certificate is a PFX (PKCS#12) formatted Certificate or Certificate chain.
    CER = "cer"  #: The Certificate is a base64-encoded X.509 Certificate.

class CertificateState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the Certificate.
    """

    ACTIVE = "active"  #: The Certificate is available for use in Pools.
    DELETING = "deleting"  #: The user has requested that the Certificate be deleted, but the delete operation has not yet completed. You may not reference the Certificate when creating or updating Pools.
    DELETE_FAILED = "deletefailed"  #: The user requested that the Certificate be deleted, but there are Pools that still have references to the Certificate, or it is still installed on one or more Nodes. (The latter can occur if the Certificate has been removed from the Pool, but the Compute Node has not yet restarted. Compute Nodes refresh their Certificates only when they restart.) You may use the cancel Certificate delete operation to cancel the delete, or the delete Certificate operation to retry the delete.

class CertificateStoreLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value is currentuser. This property is applicable only for Pools configured with
    Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with
    virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the
    Certificates are stored in a directory inside the Task working directory and an environment
    variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For
    Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home
    directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
    """

    CURRENT_USER = "currentuser"  #: Certificates should be installed to the CurrentUser Certificate store.
    LOCAL_MACHINE = "localmachine"  #: Certificates should be installed to the LocalMachine Certificate store.

class CertificateVisibility(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    START_TASK = "starttask"  #: The Certificate should be visible to the user account under which the StartTask is run. Note that if AutoUser Scope is Pool for both the StartTask and a Task, this certificate will be visible to the Task as well.
    TASK = "task"  #: The Certificate should be visible to the user accounts under which Job Tasks are run.
    REMOTE_USER = "remoteuser"  #: The Certificate should be visible to the user accounts under which users remotely access the Compute Node.

class ComputeNodeDeallocationOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value is requeue.
    """

    REQUEUE = "requeue"  #: Terminate running Task processes and requeue the Tasks. The Tasks will run again when a Compute Node is available. Remove Compute Nodes as soon as Tasks have been terminated.
    TERMINATE = "terminate"  #: Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Remove Compute Nodes as soon as Tasks have been terminated.
    TASK_COMPLETION = "taskcompletion"  #: Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Remove Compute Nodes when all Tasks have completed.
    RETAINED_DATA = "retaineddata"  #: Allow currently running Tasks to complete, then wait for all Task data retention periods to expire. Schedule no new Tasks while waiting. Remove Compute Nodes when all Task retention periods have expired.

class ComputeNodeFillType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If not specified, the default is spread.
    """

    SPREAD = "spread"  #: Tasks should be assigned evenly across all Compute Nodes in the Pool.
    PACK = "pack"  #: As many Tasks as possible (taskSlotsPerNode) should be assigned to each Compute Node in the Pool before any Tasks are assigned to the next Compute Node in the Pool.

class ComputeNodeRebootOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value is requeue.
    """

    REQUEUE = "requeue"  #: Terminate running Task processes and requeue the Tasks. The Tasks will run again when a Compute Node is available. Restart the Compute Node as soon as Tasks have been terminated.
    TERMINATE = "terminate"  #: Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Restart the Compute Node as soon as Tasks have been terminated.
    TASK_COMPLETION = "taskcompletion"  #: Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Restart the Compute Node when all Tasks have completed.
    RETAINED_DATA = "retaineddata"  #: Allow currently running Tasks to complete, then wait for all Task data retention periods to expire. Schedule no new Tasks while waiting. Restart the Compute Node when all Task retention periods have expired.

class ComputeNodeReimageOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value is requeue.
    """

    REQUEUE = "requeue"  #: Terminate running Task processes and requeue the Tasks. The Tasks will run again when a Compute Node is available. Reimage the Compute Node as soon as Tasks have been terminated.
    TERMINATE = "terminate"  #: Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Reimage the Compute Node as soon as Tasks have been terminated.
    TASK_COMPLETION = "taskcompletion"  #: Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Reimage the Compute Node when all Tasks have completed.
    RETAINED_DATA = "retaineddata"  #: Allow currently running Tasks to complete, then wait for all Task data retention periods to expire. Schedule no new Tasks while waiting. Reimage the Compute Node when all Task retention periods have expired.

class ComputeNodeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The low-priority Compute Node has been preempted. Tasks which were running on the Compute Node
    when it was preempted will be rescheduled when another Compute Node becomes available.
    """

    IDLE = "idle"  #: The Compute Node is not currently running a Task.
    REBOOTING = "rebooting"  #: The Compute Node is rebooting.
    REIMAGING = "reimaging"  #: The Compute Node is reimaging.
    RUNNING = "running"  #: The Compute Node is running one or more Tasks (other than a StartTask).
    UNUSABLE = "unusable"  #: The Compute Node cannot be used for Task execution due to errors.
    CREATING = "creating"  #: The Batch service has obtained the underlying virtual machine from Azure Compute, but it has not yet started to join the Pool.
    STARTING = "starting"  #: The Batch service is starting on the underlying virtual machine.
    WAITING_FOR_START_TASK = "waitingforstarttask"  #: The StartTask has started running on the Compute Node, but waitForSuccess is set and the StartTask has not yet completed.
    START_TASK_FAILED = "starttaskfailed"  #: The StartTask has failed on the Compute Node (and exhausted all retries), and waitForSuccess is set. The Compute Node is not usable for running Tasks.
    UNKNOWN = "unknown"  #: The Batch service has lost contact with the Compute Node, and does not know its true state.
    LEAVING_POOL = "leavingpool"  #: The Compute Node is leaving the Pool, either because the user explicitly removed it or because the Pool is resizing or autoscaling down.
    OFFLINE = "offline"  #: The Compute Node is not currently running a Task, and scheduling of new Tasks to the Compute Node is disabled.
    PREEMPTED = "preempted"  #: The low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available.

class ContainerWorkingDirectory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default is 'taskWorkingDirectory'.
    """

    TASK_WORKING_DIRECTORY = "taskWorkingDirectory"  #: Use the standard Batch service Task working directory, which will contain the Task Resource Files populated by Batch.
    CONTAINER_IMAGE_DEFAULT = "containerImageDefault"  #: Use the working directory defined in the container Image. Beware that this directory will not contain the Resource Files downloaded by Batch.

class DependencyAction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent
    tasks continue to wait). Batch does not yet support cancellation of dependent tasks.
    """

    SATISFY = "satisfy"  #: Satisfy tasks waiting on this task; once all dependencies are satisfied, the task will be scheduled to run.
    BLOCK = "block"  #: Blocks tasks waiting on this task, preventing them from being scheduled.

class DisableComputeNodeSchedulingOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value is requeue.
    """

    REQUEUE = "requeue"  #: Terminate running Task processes and requeue the Tasks. The Tasks may run again on other Compute Nodes, or when Task scheduling is re-enabled on this Compute Node. Enter offline state as soon as Tasks have been terminated.
    TERMINATE = "terminate"  #: Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Enter offline state as soon as Tasks have been terminated.
    TASK_COMPLETION = "taskcompletion"  #: Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Enter offline state when all Tasks have completed.

class DisableJobOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """What to do with active Tasks associated with the Job.
    """

    REQUEUE = "requeue"  #: Terminate running Tasks and requeue them. The Tasks will run again when the Job is enabled.
    TERMINATE = "terminate"  #: Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again.
    WAIT = "wait"  #: Allow currently running Tasks to complete.

class DiskEncryptionTarget(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A disk to encrypt.
    """

    OS_DISK = "osdisk"  #: The temporary disk on the compute node is encrypted. On Linux this encryption applies to other partitions (such as those on mounted data disks) when encryption occurs at boot time.
    TEMPORARY_DISK = "temporarydisk"  #: The temporary disk on the compute node is encrypted. On Linux this encryption applies to other partitions (such as those on mounted data disks) when encryption occurs at boot time.

class DynamicVNetAssignmentScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The scope of dynamic vnet assignment.
    """

    NONE = "none"  #: No dynamic VNet assignment is enabled.
    JOB = "job"  #: Dynamic VNet assignment is done per-job.

class ElevationLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The elevation level of the user.
    """

    NON_ADMIN = "nonadmin"  #: The user is a standard user without elevated access.
    ADMIN = "admin"  #: The user is a user with elevated access and operates with full Administrator permissions.

class ErrorCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The category of the error.
    """

    USER_ERROR = "usererror"  #: The error is due to a user issue, such as misconfiguration.
    SERVER_ERROR = "servererror"  #: The error is due to an internal server issue.

class InboundEndpointProtocol(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The protocol of the endpoint.
    """

    TCP = "tcp"  #: Use TCP for the endpoint.
    UDP = "udp"  #: Use UDP for the endpoint.

class IPAddressProvisioningType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The provisioning type for Public IP Addresses for the Pool.
    """

    BATCH_MANAGED = "batchmanaged"  #: A public IP will be created and managed by Batch. There may be multiple public IPs depending on the size of the Pool.
    USER_MANAGED = "usermanaged"  #: Public IPs are provided by the user and will be used to provision the Compute Nodes.
    NO_PUBLIC_IP_ADDRESSES = "nopublicipaddresses"  #: No public IP Address will be created.

class JobAction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default is none for exit code 0 and terminate for all other exit conditions. If the Job's
    onTaskFailed property is noaction, then specifying this property returns an error and the add
    Task request fails with an invalid property value error; if you are calling the REST API
    directly, the HTTP status code is 400 (Bad Request).
    """

    NONE = "none"  #: Take no action.
    DISABLE = "disable"  #: Disable the Job. This is equivalent to calling the disable Job API, with a disableTasks value of requeue.
    TERMINATE = "terminate"  #: Terminate the Job. The terminateReason in the Job's executionInfo is set to "TaskFailed".

class JobPreparationTaskState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current state of the Job Preparation Task on the Compute Node.
    """

    RUNNING = "running"  #: The Task is currently running (including retrying).
    COMPLETED = "completed"  #: The Task has exited with exit code 0, or the Task has exhausted its retry limit, or the Batch service was unable to start the Task due to Task preparation errors (such as resource file download failures).

class JobReleaseTaskState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current state of the Job Release Task on the Compute Node.
    """

    RUNNING = "running"  #: The Task is currently running (including retrying).
    COMPLETED = "completed"  #: The Task has exited with exit code 0, or the Task has exhausted its retry limit, or the Batch service was unable to start the Task due to Task preparation errors (such as resource file download failures).

class JobScheduleState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the Job Schedule.
    """

    ACTIVE = "active"  #: The Job Schedule is active and will create Jobs as per its schedule.
    COMPLETED = "completed"  #: The Job Schedule has terminated, either by reaching its end time or by the user terminating it explicitly.
    DISABLED = "disabled"  #: The user has disabled the Job Schedule. The scheduler will not initiate any new Jobs will on this schedule, but any existing active Job will continue to run.
    TERMINATING = "terminating"  #: The Job Schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new Jobs for this Job Schedule, nor is any existing Job active.
    DELETING = "deleting"  #: The user has requested that the Job Schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new Jobs for this Job Schedule, and will delete any existing Jobs and Tasks under the Job Schedule, including any active Job. The Job Schedule will be deleted when all Jobs and Tasks under the Job Schedule have been deleted.

class JobState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the Job.
    """

    ACTIVE = "active"  #: The Job is available to have Tasks scheduled.
    DISABLING = "disabling"  #: A user has requested that the Job be disabled, but the disable operation is still in progress (for example, waiting for Tasks to terminate).
    DISABLED = "disabled"  #: A user has disabled the Job. No Tasks are running, and no new Tasks will be scheduled.
    ENABLING = "enabling"  #: A user has requested that the Job be enabled, but the enable operation is still in progress.
    TERMINATING = "terminating"  #: The Job is about to complete, either because a Job Manager Task has completed or because the user has terminated the Job, but the terminate operation is still in progress (for example, because Job Release Tasks are running).
    COMPLETED = "completed"  #: All Tasks have terminated, and the system will not accept any more Tasks or any further changes to the Job.
    DELETING = "deleting"  #: A user has requested that the Job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running Tasks).

class LoginMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The default value for VirtualMachineConfiguration Pools is 'batch' and for
    CloudServiceConfiguration Pools is 'interactive'.
    """

    BATCH = "batch"  #: The LOGON32_LOGON_BATCH Win32 login mode. The batch login mode is recommended for long running parallel processes.
    INTERACTIVE = "interactive"  #: The LOGON32_LOGON_INTERACTIVE Win32 login mode. UAC is enabled on Windows VirtualMachineConfiguration Pools. If this option is used with an elevated user identity in a Windows VirtualMachineConfiguration Pool, the user session will not be elevated unless the application executed by the Task command line is configured to always require administrative privilege or to always require maximum privilege.

class NetworkSecurityGroupRuleAccess(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The action that should be taken for a specified IP address, subnet range or tag.
    """

    ALLOW = "allow"  #: Allow access.
    DENY = "deny"  #: Deny access.

class OnAllTasksComplete(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The action the Batch service should take when all Tasks in the Job are in the completed state.
    """

    NO_ACTION = "noaction"  #: Do nothing. The Job remains active unless terminated or disabled by some other means.
    TERMINATE_JOB = "terminatejob"  #: Terminate the Job. The Job's terminateReason is set to 'AllTasksComplete'.

class OnTaskFailure(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task
    completes with a non-zero exit code after exhausting its retry count, or if there was an error
    starting the Task, for example due to a resource file download error. The default is noaction.
    """

    NO_ACTION = "noaction"  #: Do nothing. The Job remains active unless terminated or disabled by some other means.
    PERFORM_EXIT_OPTIONS_JOB_ACTION = "performexitoptionsjobaction"  #: Take the action associated with the Task exit condition in the Task's exitConditions collection. (This may still result in no action being taken, if that is what the Task specifies.).

class OSType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of operating system (e.g. Windows or Linux) of the Image.
    """

    LINUX = "linux"  #: The Linux operating system.
    WINDOWS = "windows"  #: The Windows operating system.

class OutputFileUploadCondition(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The conditions under which a Task output file or set of files should be uploaded.
    """

    TASK_SUCCESS = "tasksuccess"  #: Upload the file(s) only after the Task process exits with an exit code of 0.
    TASK_FAILURE = "taskfailure"  #: Upload the file(s) only after the Task process exits with a nonzero exit code.
    TASK_COMPLETION = "taskcompletion"  #: Upload the file(s) after the Task process exits, no matter what the exit code was.

class PoolLifetimeOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to
    Pools.
    """

    JOB_SCHEDULE = "jobschedule"  #: The Pool exists for the lifetime of the Job Schedule. The Batch Service creates the Pool when it creates the first Job on the schedule. You may apply this option only to Job Schedules, not to Jobs.
    JOB = "job"  #: The Pool exists for the lifetime of the Job to which it is dedicated. The Batch service creates the Pool when it creates the Job. If the 'job' option is applied to a Job Schedule, the Batch service creates a new auto Pool for every Job created on the schedule.

class PoolState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current state of the Pool.
    """

    ACTIVE = "active"  #: The Pool is available to run Tasks subject to the availability of Compute Nodes.
    DELETING = "deleting"  #: The user has requested that the Pool be deleted, but the delete operation has not yet completed.

class SchedulingState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the Compute Node is available for Task scheduling.
    """

    ENABLED = "enabled"  #: Tasks can be scheduled on the Compute Node.
    DISABLED = "disabled"  #: No new Tasks will be scheduled on the Compute Node. Tasks already running on the Compute Node may still run to completion. All Compute Nodes start with scheduling enabled.

class StartTaskState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the StartTask on the Compute Node.
    """

    RUNNING = "running"  #: The StartTask is currently running.
    COMPLETED = "completed"  #: The StartTask has exited with exit code 0, or the StartTask has failed and the retry limit has reached, or the StartTask process did not run due to Task preparation errors (such as resource file download failures).

class StorageAccountType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The storage Account type for use in creating data disks.
    """

    STANDARD_LRS = "standard_lrs"  #: The data disk should use standard locally redundant storage.
    PREMIUM_LRS = "premium_lrs"  #: The data disk should use premium locally redundant storage.

class SubtaskState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the subtask.
    """

    PREPARING = "preparing"  #: The Task has been assigned to a Compute Node, but is waiting for a required Job Preparation Task to complete on the Compute Node. If the Job Preparation Task succeeds, the Task will move to running. If the Job Preparation Task fails, the Task will return to active and will be eligible to be assigned to a different Compute Node.
    RUNNING = "running"  #: The Task is running on a Compute Node. This includes task-level preparation such as downloading resource files or deploying Packages specified on the Task - it does not necessarily mean that the Task command line has started executing.
    COMPLETED = "completed"  #: The Task is no longer eligible to run, usually because the Task has finished successfully, or the Task has finished unsuccessfully and has exhausted its retry limit. A Task is also marked as completed if an error occurred launching the Task, or when the Task has been terminated.

class TaskAddStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The status of the add Task request.
    """

    SUCCESS = "success"  #: The Task was added successfully.
    CLIENT_ERROR = "clienterror"  #: The Task failed to add due to a client error and should not be retried without modifying the request as appropriate.
    SERVER_ERROR = "servererror"  #: Task failed to add due to a server error and can be retried without modification.

class TaskExecutionResult(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The result of Task execution.
    """

    SUCCESS = "success"  #: The Task ran successfully.
    FAILURE = "failure"  #: There was an error during processing of the Task. The failure may have occurred before the Task process was launched, while the Task process was executing, or after the Task process exited.

class TaskState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the Task.
    """

    ACTIVE = "active"  #: The Task is queued and able to run, but is not currently assigned to a Compute Node. A Task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
    PREPARING = "preparing"  #: The Task has been assigned to a Compute Node, but is waiting for a required Job Preparation Task to complete on the Compute Node. If the Job Preparation Task succeeds, the Task will move to running. If the Job Preparation Task fails, the Task will return to active and will be eligible to be assigned to a different Compute Node.
    RUNNING = "running"  #: The Task is running on a Compute Node. This includes task-level preparation such as downloading resource files or deploying Packages specified on the Task - it does not necessarily mean that the Task command line has started executing.
    COMPLETED = "completed"  #: The Task is no longer eligible to run, usually because the Task has finished successfully, or the Task has finished unsuccessfully and has exhausted its retry limit. A Task is also marked as completed if an error occurred launching the Task, or when the Task has been terminated.

class VerificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the Azure Batch service actively verifies that the Image is compatible with the
    associated Compute Node agent SKU.
    """

    VERIFIED = "verified"  #: The Image is guaranteed to be compatible with the associated Compute Node agent SKU and all Batch features have been confirmed to work as expected.
    UNVERIFIED = "unverified"  #: The associated Compute Node agent SKU should have binary compatibility with the Image, but specific functionality has not been verified.
