# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class FileOperations(object):
    """FileOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~batch_service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def delete_from_task(
        self,
        job_id,  # type: str
        task_id,  # type: str
        file_path,  # type: str
        recursive=None,  # type: Optional[bool]
        file_delete_from_task_options=None,  # type: Optional["models.FileDeleteFromTaskOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes the specified Task file from the Compute Node where the Task ran.

        Deletes the specified Task file from the Compute Node where the Task ran.

        :param job_id: The ID of the Job that contains the Task.
        :type job_id: str
        :param task_id: The ID of the Task whose file you want to delete.
        :type task_id: str
        :param file_path: The path to the Task file or directory that you want to delete.
        :type file_path: str
        :param recursive: Whether to delete children of a directory. If the filePath parameter
         represents a directory instead of a file, you can set recursive to true to delete the directory
         and all of the files and subdirectories in it. If recursive is false then the directory must be
         empty or deletion will fail.
        :type recursive: bool
        :param file_delete_from_task_options: Parameter group.
        :type file_delete_from_task_options: ~batch_service.models.FileDeleteFromTaskOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if file_delete_from_task_options is not None:
            _timeout = file_delete_from_task_options.timeout
            _client_request_id = file_delete_from_task_options.client_request_id
            _return_client_request_id = file_delete_from_task_options.return_client_request_id
            _ocp_date = file_delete_from_task_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.delete_from_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
            'filePath': self._serialize.url("file_path", file_path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if recursive is not None:
            query_parameters['recursive'] = self._serialize.query("recursive", recursive, 'bool')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete_from_task.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/files/{filePath}'}  # type: ignore

    def get_from_task(
        self,
        job_id,  # type: str
        task_id,  # type: str
        file_path,  # type: str
        file_get_from_task_options=None,  # type: Optional["models.FileGetFromTaskOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Returns the content of the specified Task file.

        :param job_id: The ID of the Job that contains the Task.
        :type job_id: str
        :param task_id: The ID of the Task whose file you want to retrieve.
        :type task_id: str
        :param file_path: The path to the Task file that you want to get the content of.
        :type file_path: str
        :param file_get_from_task_options: Parameter group.
        :type file_get_from_task_options: ~batch_service.models.FileGetFromTaskOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _ocp_range = None
        _if_modified_since = None
        _if_unmodified_since = None
        if file_get_from_task_options is not None:
            _timeout = file_get_from_task_options.timeout
            _client_request_id = file_get_from_task_options.client_request_id
            _return_client_request_id = file_get_from_task_options.return_client_request_id
            _ocp_date = file_get_from_task_options.ocp_date
            _ocp_range = file_get_from_task_options.ocp_range
            _if_modified_since = file_get_from_task_options.if_modified_since
            _if_unmodified_since = file_get_from_task_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/octet-stream, application/json"

        # Construct URL
        url = self.get_from_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
            'filePath': self._serialize.url("file_path", file_path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _ocp_range is not None:
            header_parameters['ocp-range'] = self._serialize.header("ocp_range", _ocp_range, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['ocp-creation-time']=self._deserialize('rfc-1123', response.headers.get('ocp-creation-time'))
        response_headers['ocp-batch-file-isdirectory']=self._deserialize('bool', response.headers.get('ocp-batch-file-isdirectory'))
        response_headers['ocp-batch-file-url']=self._deserialize('str', response.headers.get('ocp-batch-file-url'))
        response_headers['ocp-batch-file-mode']=self._deserialize('str', response.headers.get('ocp-batch-file-mode'))
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))
        response_headers['Content-Length']=self._deserialize('long', response.headers.get('Content-Length'))
        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get_from_task.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/files/{filePath}'}  # type: ignore

    def get_properties_from_task(
        self,
        job_id,  # type: str
        task_id,  # type: str
        file_path,  # type: str
        file_get_properties_from_task_options=None,  # type: Optional["models.FileGetPropertiesFromTaskOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Gets the properties of the specified Task file.

        :param job_id: The ID of the Job that contains the Task.
        :type job_id: str
        :param task_id: The ID of the Task whose file you want to get the properties of.
        :type task_id: str
        :param file_path: The path to the Task file that you want to get the properties of.
        :type file_path: str
        :param file_get_properties_from_task_options: Parameter group.
        :type file_get_properties_from_task_options: ~batch_service.models.FileGetPropertiesFromTaskOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_modified_since = None
        _if_unmodified_since = None
        if file_get_properties_from_task_options is not None:
            _timeout = file_get_properties_from_task_options.timeout
            _client_request_id = file_get_properties_from_task_options.client_request_id
            _return_client_request_id = file_get_properties_from_task_options.return_client_request_id
            _ocp_date = file_get_properties_from_task_options.ocp_date
            _if_modified_since = file_get_properties_from_task_options.if_modified_since
            _if_unmodified_since = file_get_properties_from_task_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get_properties_from_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
            'filePath': self._serialize.url("file_path", file_path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['ocp-creation-time']=self._deserialize('rfc-1123', response.headers.get('ocp-creation-time'))
        response_headers['ocp-batch-file-isdirectory']=self._deserialize('bool', response.headers.get('ocp-batch-file-isdirectory'))
        response_headers['ocp-batch-file-url']=self._deserialize('str', response.headers.get('ocp-batch-file-url'))
        response_headers['ocp-batch-file-mode']=self._deserialize('str', response.headers.get('ocp-batch-file-mode'))
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))
        response_headers['Content-Length']=self._deserialize('long', response.headers.get('Content-Length'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    get_properties_from_task.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/files/{filePath}'}  # type: ignore

    def delete_from_compute_node(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        file_path,  # type: str
        recursive=None,  # type: Optional[bool]
        file_delete_from_compute_node_options=None,  # type: Optional["models.FileDeleteFromComputeNodeOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes the specified file from the Compute Node.

        Deletes the specified file from the Compute Node.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node from which you want to delete the file.
        :type node_id: str
        :param file_path: The path to the file or directory that you want to delete.
        :type file_path: str
        :param recursive: Whether to delete children of a directory. If the filePath parameter
         represents a directory instead of a file, you can set recursive to true to delete the directory
         and all of the files and subdirectories in it. If recursive is false then the directory must be
         empty or deletion will fail.
        :type recursive: bool
        :param file_delete_from_compute_node_options: Parameter group.
        :type file_delete_from_compute_node_options: ~batch_service.models.FileDeleteFromComputeNodeOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if file_delete_from_compute_node_options is not None:
            _timeout = file_delete_from_compute_node_options.timeout
            _client_request_id = file_delete_from_compute_node_options.client_request_id
            _return_client_request_id = file_delete_from_compute_node_options.return_client_request_id
            _ocp_date = file_delete_from_compute_node_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.delete_from_compute_node.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
            'filePath': self._serialize.url("file_path", file_path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if recursive is not None:
            query_parameters['recursive'] = self._serialize.query("recursive", recursive, 'bool')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete_from_compute_node.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/files/{filePath}'}  # type: ignore

    def get_from_compute_node(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        file_path,  # type: str
        file_get_from_compute_node_options=None,  # type: Optional["models.FileGetFromComputeNodeOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Returns the content of the specified Compute Node file.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node that contains the file.
        :type node_id: str
        :param file_path: The path to the Compute Node file that you want to get the content of.
        :type file_path: str
        :param file_get_from_compute_node_options: Parameter group.
        :type file_get_from_compute_node_options: ~batch_service.models.FileGetFromComputeNodeOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _ocp_range = None
        _if_modified_since = None
        _if_unmodified_since = None
        if file_get_from_compute_node_options is not None:
            _timeout = file_get_from_compute_node_options.timeout
            _client_request_id = file_get_from_compute_node_options.client_request_id
            _return_client_request_id = file_get_from_compute_node_options.return_client_request_id
            _ocp_date = file_get_from_compute_node_options.ocp_date
            _ocp_range = file_get_from_compute_node_options.ocp_range
            _if_modified_since = file_get_from_compute_node_options.if_modified_since
            _if_unmodified_since = file_get_from_compute_node_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/octet-stream, application/json"

        # Construct URL
        url = self.get_from_compute_node.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
            'filePath': self._serialize.url("file_path", file_path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _ocp_range is not None:
            header_parameters['ocp-range'] = self._serialize.header("ocp_range", _ocp_range, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['ocp-creation-time']=self._deserialize('rfc-1123', response.headers.get('ocp-creation-time'))
        response_headers['ocp-batch-file-isdirectory']=self._deserialize('bool', response.headers.get('ocp-batch-file-isdirectory'))
        response_headers['ocp-batch-file-url']=self._deserialize('str', response.headers.get('ocp-batch-file-url'))
        response_headers['ocp-batch-file-mode']=self._deserialize('str', response.headers.get('ocp-batch-file-mode'))
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))
        response_headers['Content-Length']=self._deserialize('long', response.headers.get('Content-Length'))
        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get_from_compute_node.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/files/{filePath}'}  # type: ignore

    def get_properties_from_compute_node(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        file_path,  # type: str
        file_get_properties_from_compute_node_options=None,  # type: Optional["models.FileGetPropertiesFromComputeNodeOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Gets the properties of the specified Compute Node file.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node that contains the file.
        :type node_id: str
        :param file_path: The path to the Compute Node file that you want to get the properties of.
        :type file_path: str
        :param file_get_properties_from_compute_node_options: Parameter group.
        :type file_get_properties_from_compute_node_options: ~batch_service.models.FileGetPropertiesFromComputeNodeOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_modified_since = None
        _if_unmodified_since = None
        if file_get_properties_from_compute_node_options is not None:
            _timeout = file_get_properties_from_compute_node_options.timeout
            _client_request_id = file_get_properties_from_compute_node_options.client_request_id
            _return_client_request_id = file_get_properties_from_compute_node_options.return_client_request_id
            _ocp_date = file_get_properties_from_compute_node_options.ocp_date
            _if_modified_since = file_get_properties_from_compute_node_options.if_modified_since
            _if_unmodified_since = file_get_properties_from_compute_node_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get_properties_from_compute_node.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
            'filePath': self._serialize.url("file_path", file_path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['ocp-creation-time']=self._deserialize('rfc-1123', response.headers.get('ocp-creation-time'))
        response_headers['ocp-batch-file-isdirectory']=self._deserialize('bool', response.headers.get('ocp-batch-file-isdirectory'))
        response_headers['ocp-batch-file-url']=self._deserialize('str', response.headers.get('ocp-batch-file-url'))
        response_headers['ocp-batch-file-mode']=self._deserialize('str', response.headers.get('ocp-batch-file-mode'))
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))
        response_headers['Content-Length']=self._deserialize('long', response.headers.get('Content-Length'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    get_properties_from_compute_node.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/files/{filePath}'}  # type: ignore

    def list_from_task(
        self,
        job_id,  # type: str
        task_id,  # type: str
        recursive=None,  # type: Optional[bool]
        file_list_from_task_options=None,  # type: Optional["models.FileListFromTaskOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.NodeFileListResult"]
        """Lists the files in a Task's directory on its Compute Node.

        Lists the files in a Task's directory on its Compute Node.

        :param job_id: The ID of the Job that contains the Task.
        :type job_id: str
        :param task_id: The ID of the Task whose files you want to list.
        :type task_id: str
        :param recursive: Whether to list children of the Task directory. This parameter can be used in
         combination with the filter parameter to list specific type of files.
        :type recursive: bool
        :param file_list_from_task_options: Parameter group.
        :type file_list_from_task_options: ~batch_service.models.FileListFromTaskOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either NodeFileListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.NodeFileListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.NodeFileListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _filter = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if file_list_from_task_options is not None:
            _filter = file_list_from_task_options.filter
            _max_results = file_list_from_task_options.max_results
            _timeout = file_list_from_task_options.timeout
            _client_request_id = file_list_from_task_options.client_request_id
            _return_client_request_id = file_list_from_task_options.return_client_request_id
            _ocp_date = file_list_from_task_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_from_task.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'jobId': self._serialize.url("job_id", job_id, 'str'),
                    'taskId': self._serialize.url("task_id", task_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if recursive is not None:
                    query_parameters['recursive'] = self._serialize.query("recursive", recursive, 'bool')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'jobId': self._serialize.url("job_id", job_id, 'str'),
                    'taskId': self._serialize.url("task_id", task_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('NodeFileListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_from_task.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/files'}  # type: ignore

    def list_from_compute_node(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        recursive=None,  # type: Optional[bool]
        file_list_from_compute_node_options=None,  # type: Optional["models.FileListFromComputeNodeOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.NodeFileListResult"]
        """Lists all of the files in Task directories on the specified Compute Node.

        Lists all of the files in Task directories on the specified Compute Node.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node whose files you want to list.
        :type node_id: str
        :param recursive: Whether to list children of a directory.
        :type recursive: bool
        :param file_list_from_compute_node_options: Parameter group.
        :type file_list_from_compute_node_options: ~batch_service.models.FileListFromComputeNodeOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either NodeFileListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.NodeFileListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.NodeFileListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _filter = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if file_list_from_compute_node_options is not None:
            _filter = file_list_from_compute_node_options.filter
            _max_results = file_list_from_compute_node_options.max_results
            _timeout = file_list_from_compute_node_options.timeout
            _client_request_id = file_list_from_compute_node_options.client_request_id
            _return_client_request_id = file_list_from_compute_node_options.return_client_request_id
            _ocp_date = file_list_from_compute_node_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_from_compute_node.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'poolId': self._serialize.url("pool_id", pool_id, 'str'),
                    'nodeId': self._serialize.url("node_id", node_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if recursive is not None:
                    query_parameters['recursive'] = self._serialize.query("recursive", recursive, 'bool')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'poolId': self._serialize.url("pool_id", pool_id, 'str'),
                    'nodeId': self._serialize.url("node_id", node_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('NodeFileListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_from_compute_node.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/files'}  # type: ignore
