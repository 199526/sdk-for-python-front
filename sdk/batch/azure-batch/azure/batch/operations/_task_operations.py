# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class TaskOperations(object):
    """TaskOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~batch_service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def add(
        self,
        job_id,  # type: str
        task,  # type: "models.TaskAddParameter"
        task_add_options=None,  # type: Optional["models.TaskAddOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Adds a Task to the specified Job.

        The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not
        completed within 180 days of being added it will be terminated by the Batch service and left in
        whatever state it was in at that time.

        :param job_id: The ID of the Job to which the Task is to be added.
        :type job_id: str
        :param task: The Task to be added.
        :type task: ~batch_service.models.TaskAddParameter
        :param task_add_options: Parameter group.
        :type task_add_options: ~batch_service.models.TaskAddOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if task_add_options is not None:
            _timeout = task_add_options.timeout
            _client_request_id = task_add_options.client_request_id
            _return_client_request_id = task_add_options.return_client_request_id
            _ocp_date = task_add_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.add.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(task, 'TaskAddParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    add.metadata = {'url': '/jobs/{jobId}/tasks'}  # type: ignore

    def list(
        self,
        job_id,  # type: str
        task_list_options=None,  # type: Optional["models.TaskListOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CloudTaskListResult"]
        """Lists all of the Tasks that are associated with the specified Job.

        For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to
        the primary Task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the Job.
        :type job_id: str
        :param task_list_options: Parameter group.
        :type task_list_options: ~batch_service.models.TaskListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CloudTaskListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.CloudTaskListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudTaskListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _filter = None
        _select = None
        _expand = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if task_list_options is not None:
            _filter = task_list_options.filter
            _select = task_list_options.select
            _expand = task_list_options.expand
            _max_results = task_list_options.max_results
            _timeout = task_list_options.timeout
            _client_request_id = task_list_options.client_request_id
            _return_client_request_id = task_list_options.return_client_request_id
            _ocp_date = task_list_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'jobId': self._serialize.url("job_id", job_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if _select is not None:
                    query_parameters['$select'] = self._serialize.query("select", _select, 'str')
                if _expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", _expand, 'str')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'jobId': self._serialize.url("job_id", job_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CloudTaskListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/jobs/{jobId}/tasks'}  # type: ignore

    def add_collection(
        self,
        job_id,  # type: str
        task_collection,  # type: "models.TaskAddCollectionParameter"
        task_add_collection_options=None,  # type: Optional["models.TaskAddCollectionOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.TaskAddCollectionResult"
        """Adds a collection of Tasks to the specified Job.

        Note that each Task must have a unique ID. The Batch service may not return the results for
        each Task in the same order the Tasks were submitted in this request. If the server times out
        or the connection is closed during the request, the request may have been partially or fully
        processed, or not at all. In such cases, the user should re-issue the request. Note that it is
        up to the user to correctly handle failures when re-issuing a request. For example, you should
        use the same Task IDs during a retry so that if the prior operation succeeded, the retry will
        not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a
        client can retry the request. In a retry, it is most efficient to resubmit only Tasks that
        failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum
        lifetime of a Task from addition to completion is 180 days. If a Task has not completed within
        180 days of being added it will be terminated by the Batch service and left in whatever state
        it was in at that time.

        :param job_id: The ID of the Job to which the Task collection is to be added.
        :type job_id: str
        :param task_collection: The Tasks to be added.
        :type task_collection: ~batch_service.models.TaskAddCollectionParameter
        :param task_add_collection_options: Parameter group.
        :type task_add_collection_options: ~batch_service.models.TaskAddCollectionOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TaskAddCollectionResult, or the result of cls(response)
        :rtype: ~batch_service.models.TaskAddCollectionResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.TaskAddCollectionResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if task_add_collection_options is not None:
            _timeout = task_add_collection_options.timeout
            _client_request_id = task_add_collection_options.client_request_id
            _return_client_request_id = task_add_collection_options.return_client_request_id
            _ocp_date = task_add_collection_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.add_collection.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(task_collection, 'TaskAddCollectionParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        deserialized = self._deserialize('TaskAddCollectionResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    add_collection.metadata = {'url': '/jobs/{jobId}/addtaskcollection'}  # type: ignore

    def delete(
        self,
        job_id,  # type: str
        task_id,  # type: str
        task_delete_options=None,  # type: Optional["models.TaskDeleteOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a Task from the specified Job.

        When a Task is deleted, all of the files in its directory on the Compute Node where it ran are
        also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task
        operation applies synchronously to the primary task; subtasks and their files are then deleted
        asynchronously in the background.

        :param job_id: The ID of the Job from which to delete the Task.
        :type job_id: str
        :param task_id: The ID of the Task to delete.
        :type task_id: str
        :param task_delete_options: Parameter group.
        :type task_delete_options: ~batch_service.models.TaskDeleteOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if task_delete_options is not None:
            _timeout = task_delete_options.timeout
            _client_request_id = task_delete_options.client_request_id
            _return_client_request_id = task_delete_options.return_client_request_id
            _ocp_date = task_delete_options.ocp_date
            _if_match = task_delete_options.if_match
            _if_none_match = task_delete_options.if_none_match
            _if_modified_since = task_delete_options.if_modified_since
            _if_unmodified_since = task_delete_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}'}  # type: ignore

    def get(
        self,
        job_id,  # type: str
        task_id,  # type: str
        task_get_options=None,  # type: Optional["models.TaskGetOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CloudTask"
        """Gets information about the specified Task.

        For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to
        the primary Task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the Job that contains the Task.
        :type job_id: str
        :param task_id: The ID of the Task to get information about.
        :type task_id: str
        :param task_get_options: Parameter group.
        :type task_get_options: ~batch_service.models.TaskGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudTask, or the result of cls(response)
        :rtype: ~batch_service.models.CloudTask
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudTask"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _select = None
        _expand = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if task_get_options is not None:
            _select = task_get_options.select
            _expand = task_get_options.expand
            _timeout = task_get_options.timeout
            _client_request_id = task_get_options.client_request_id
            _return_client_request_id = task_get_options.return_client_request_id
            _ocp_date = task_get_options.ocp_date
            _if_match = task_get_options.if_match
            _if_none_match = task_get_options.if_none_match
            _if_modified_since = task_get_options.if_modified_since
            _if_unmodified_since = task_get_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _select is not None:
            query_parameters['$select'] = self._serialize.query("select", _select, 'str')
        if _expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", _expand, 'str')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))
        deserialized = self._deserialize('CloudTask', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}'}  # type: ignore

    def update(
        self,
        job_id,  # type: str
        task_id,  # type: str
        task_update_parameter,  # type: "models.TaskUpdateParameter"
        task_update_options=None,  # type: Optional["models.TaskUpdateOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates the properties of the specified Task.

        :param job_id: The ID of the Job containing the Task.
        :type job_id: str
        :param task_id: The ID of the Task to update.
        :type task_id: str
        :param task_update_parameter: The parameters for the request.
        :type task_update_parameter: ~batch_service.models.TaskUpdateParameter
        :param task_update_options: Parameter group.
        :type task_update_options: ~batch_service.models.TaskUpdateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if task_update_options is not None:
            _timeout = task_update_options.timeout
            _client_request_id = task_update_options.client_request_id
            _return_client_request_id = task_update_options.return_client_request_id
            _ocp_date = task_update_options.ocp_date
            _if_match = task_update_options.if_match
            _if_none_match = task_update_options.if_none_match
            _if_modified_since = task_update_options.if_modified_since
            _if_unmodified_since = task_update_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.update.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(task_update_parameter, 'TaskUpdateParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    update.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}'}  # type: ignore

    def list_subtasks(
        self,
        job_id,  # type: str
        task_id,  # type: str
        task_list_subtasks_options=None,  # type: Optional["models.TaskListSubtasksOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CloudTaskListSubtasksResult"
        """Lists all of the subtasks that are associated with the specified multi-instance Task.

        If the Task is not a multi-instance Task then this returns an empty collection.

        :param job_id: The ID of the Job.
        :type job_id: str
        :param task_id: The ID of the Task.
        :type task_id: str
        :param task_list_subtasks_options: Parameter group.
        :type task_list_subtasks_options: ~batch_service.models.TaskListSubtasksOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudTaskListSubtasksResult, or the result of cls(response)
        :rtype: ~batch_service.models.CloudTaskListSubtasksResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudTaskListSubtasksResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _select = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if task_list_subtasks_options is not None:
            _select = task_list_subtasks_options.select
            _timeout = task_list_subtasks_options.timeout
            _client_request_id = task_list_subtasks_options.client_request_id
            _return_client_request_id = task_list_subtasks_options.return_client_request_id
            _ocp_date = task_list_subtasks_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.list_subtasks.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _select is not None:
            query_parameters['$select'] = self._serialize.query("select", _select, 'str')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('CloudTaskListSubtasksResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    list_subtasks.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/subtasksinfo'}  # type: ignore

    def terminate(
        self,
        job_id,  # type: str
        task_id,  # type: str
        task_terminate_options=None,  # type: Optional["models.TaskTerminateOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Terminates the specified Task.

        When the Task has been terminated, it moves to the completed state. For multi-instance Tasks,
        the terminate Task operation applies synchronously to the primary task; subtasks are then
        terminated asynchronously in the background.

        :param job_id: The ID of the Job containing the Task.
        :type job_id: str
        :param task_id: The ID of the Task to terminate.
        :type task_id: str
        :param task_terminate_options: Parameter group.
        :type task_terminate_options: ~batch_service.models.TaskTerminateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if task_terminate_options is not None:
            _timeout = task_terminate_options.timeout
            _client_request_id = task_terminate_options.client_request_id
            _return_client_request_id = task_terminate_options.return_client_request_id
            _ocp_date = task_terminate_options.ocp_date
            _if_match = task_terminate_options.if_match
            _if_none_match = task_terminate_options.if_none_match
            _if_modified_since = task_terminate_options.if_modified_since
            _if_unmodified_since = task_terminate_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.terminate.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    terminate.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/terminate'}  # type: ignore

    def reactivate(
        self,
        job_id,  # type: str
        task_id,  # type: str
        task_reactivate_options=None,  # type: Optional["models.TaskReactivateOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Reactivates a Task, allowing it to run again even if its retry count has been exhausted.

        Reactivation makes a Task eligible to be retried again up to its maximum retry count. The
        Task's state is changed to active. As the Task is no longer in the completed state, any
        previous exit code or failure information is no longer available after reactivation. Each time
        a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are
        not completed or that previously completed successfully (with an exit code of 0). Additionally,
        it will fail if the Job has completed (or is terminating or deleting).

        :param job_id: The ID of the Job containing the Task.
        :type job_id: str
        :param task_id: The ID of the Task to reactivate.
        :type task_id: str
        :param task_reactivate_options: Parameter group.
        :type task_reactivate_options: ~batch_service.models.TaskReactivateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if task_reactivate_options is not None:
            _timeout = task_reactivate_options.timeout
            _client_request_id = task_reactivate_options.client_request_id
            _return_client_request_id = task_reactivate_options.return_client_request_id
            _ocp_date = task_reactivate_options.ocp_date
            _if_match = task_reactivate_options.if_match
            _if_none_match = task_reactivate_options.if_none_match
            _if_modified_since = task_reactivate_options.if_modified_since
            _if_unmodified_since = task_reactivate_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.reactivate.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str'),
            'taskId': self._serialize.url("task_id", task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    reactivate.metadata = {'url': '/jobs/{jobId}/tasks/{taskId}/reactivate'}  # type: ignore
