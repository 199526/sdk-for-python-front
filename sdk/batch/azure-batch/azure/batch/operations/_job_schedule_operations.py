# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class JobScheduleOperations(object):
    """JobScheduleOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~batch_service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def exists(
        self,
        job_schedule_id,  # type: str
        job_schedule_exists_options=None,  # type: Optional["models.JobScheduleExistsOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Checks the specified Job Schedule exists.

        Checks the specified Job Schedule exists.

        :param job_schedule_id: The ID of the Job Schedule which you want to check.
        :type job_schedule_id: str
        :param job_schedule_exists_options: Parameter group.
        :type job_schedule_exists_options: ~batch_service.models.JobScheduleExistsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_exists_options is not None:
            _timeout = job_schedule_exists_options.timeout
            _client_request_id = job_schedule_exists_options.client_request_id
            _return_client_request_id = job_schedule_exists_options.return_client_request_id
            _ocp_date = job_schedule_exists_options.ocp_date
            _if_match = job_schedule_exists_options.if_match
            _if_none_match = job_schedule_exists_options.if_none_match
            _if_modified_since = job_schedule_exists_options.if_modified_since
            _if_unmodified_since = job_schedule_exists_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.exists.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        if response.status_code == 200:
            response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
            response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
            response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
            response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    exists.metadata = {'url': '/jobschedules/{jobScheduleId}'}  # type: ignore

    def delete(
        self,
        job_schedule_id,  # type: str
        job_schedule_delete_options=None,  # type: Optional["models.JobScheduleDeleteOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a Job Schedule from the specified Account.

        When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When
        Tasks are deleted, all the files in their working directories on the Compute Nodes are also
        deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible
        once the Job Schedule is deleted, though they are still counted towards Account lifetime
        statistics.

        :param job_schedule_id: The ID of the Job Schedule to delete.
        :type job_schedule_id: str
        :param job_schedule_delete_options: Parameter group.
        :type job_schedule_delete_options: ~batch_service.models.JobScheduleDeleteOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_delete_options is not None:
            _timeout = job_schedule_delete_options.timeout
            _client_request_id = job_schedule_delete_options.client_request_id
            _return_client_request_id = job_schedule_delete_options.return_client_request_id
            _ocp_date = job_schedule_delete_options.ocp_date
            _if_match = job_schedule_delete_options.if_match
            _if_none_match = job_schedule_delete_options.if_none_match
            _if_modified_since = job_schedule_delete_options.if_modified_since
            _if_unmodified_since = job_schedule_delete_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete.metadata = {'url': '/jobschedules/{jobScheduleId}'}  # type: ignore

    def get(
        self,
        job_schedule_id,  # type: str
        job_schedule_get_options=None,  # type: Optional["models.JobScheduleGetOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CloudJobSchedule"
        """Gets information about the specified Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule to get.
        :type job_schedule_id: str
        :param job_schedule_get_options: Parameter group.
        :type job_schedule_get_options: ~batch_service.models.JobScheduleGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudJobSchedule, or the result of cls(response)
        :rtype: ~batch_service.models.CloudJobSchedule
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudJobSchedule"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _select = None
        _expand = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_get_options is not None:
            _select = job_schedule_get_options.select
            _expand = job_schedule_get_options.expand
            _timeout = job_schedule_get_options.timeout
            _client_request_id = job_schedule_get_options.client_request_id
            _return_client_request_id = job_schedule_get_options.return_client_request_id
            _ocp_date = job_schedule_get_options.ocp_date
            _if_match = job_schedule_get_options.if_match
            _if_none_match = job_schedule_get_options.if_none_match
            _if_modified_since = job_schedule_get_options.if_modified_since
            _if_unmodified_since = job_schedule_get_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _select is not None:
            query_parameters['$select'] = self._serialize.query("select", _select, 'str')
        if _expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", _expand, 'str')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('CloudJobSchedule', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get.metadata = {'url': '/jobschedules/{jobScheduleId}'}  # type: ignore

    def patch(
        self,
        job_schedule_id,  # type: str
        job_schedule_patch_parameter,  # type: "models.JobSchedulePatchParameter"
        job_schedule_patch_options=None,  # type: Optional["models.JobSchedulePatchOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates the properties of the specified Job Schedule.

        This replaces only the Job Schedule properties specified in the request. For example, if the
        schedule property is not specified with this request, then the Batch service will keep the
        existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the
        update has taken place; currently running Jobs are unaffected.

        :param job_schedule_id: The ID of the Job Schedule to update.
        :type job_schedule_id: str
        :param job_schedule_patch_parameter: The parameters for the request.
        :type job_schedule_patch_parameter: ~batch_service.models.JobSchedulePatchParameter
        :param job_schedule_patch_options: Parameter group.
        :type job_schedule_patch_options: ~batch_service.models.JobSchedulePatchOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_patch_options is not None:
            _timeout = job_schedule_patch_options.timeout
            _client_request_id = job_schedule_patch_options.client_request_id
            _return_client_request_id = job_schedule_patch_options.return_client_request_id
            _ocp_date = job_schedule_patch_options.ocp_date
            _if_match = job_schedule_patch_options.if_match
            _if_none_match = job_schedule_patch_options.if_none_match
            _if_modified_since = job_schedule_patch_options.if_modified_since
            _if_unmodified_since = job_schedule_patch_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.patch.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(job_schedule_patch_parameter, 'JobSchedulePatchParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    patch.metadata = {'url': '/jobschedules/{jobScheduleId}'}  # type: ignore

    def update(
        self,
        job_schedule_id,  # type: str
        job_schedule_update_parameter,  # type: "models.JobScheduleUpdateParameter"
        job_schedule_update_options=None,  # type: Optional["models.JobScheduleUpdateOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates the properties of the specified Job Schedule.

        This fully replaces all the updatable properties of the Job Schedule. For example, if the
        schedule property is not specified with this request, then the Batch service will remove the
        existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the
        update has taken place; currently running Jobs are unaffected.

        :param job_schedule_id: The ID of the Job Schedule to update.
        :type job_schedule_id: str
        :param job_schedule_update_parameter: The parameters for the request.
        :type job_schedule_update_parameter: ~batch_service.models.JobScheduleUpdateParameter
        :param job_schedule_update_options: Parameter group.
        :type job_schedule_update_options: ~batch_service.models.JobScheduleUpdateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_update_options is not None:
            _timeout = job_schedule_update_options.timeout
            _client_request_id = job_schedule_update_options.client_request_id
            _return_client_request_id = job_schedule_update_options.return_client_request_id
            _ocp_date = job_schedule_update_options.ocp_date
            _if_match = job_schedule_update_options.if_match
            _if_none_match = job_schedule_update_options.if_none_match
            _if_modified_since = job_schedule_update_options.if_modified_since
            _if_unmodified_since = job_schedule_update_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.update.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(job_schedule_update_parameter, 'JobScheduleUpdateParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    update.metadata = {'url': '/jobschedules/{jobScheduleId}'}  # type: ignore

    def disable(
        self,
        job_schedule_id,  # type: str
        job_schedule_disable_options=None,  # type: Optional["models.JobScheduleDisableOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Disables a Job Schedule.

        No new Jobs will be created until the Job Schedule is enabled again.

        :param job_schedule_id: The ID of the Job Schedule to disable.
        :type job_schedule_id: str
        :param job_schedule_disable_options: Parameter group.
        :type job_schedule_disable_options: ~batch_service.models.JobScheduleDisableOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_disable_options is not None:
            _timeout = job_schedule_disable_options.timeout
            _client_request_id = job_schedule_disable_options.client_request_id
            _return_client_request_id = job_schedule_disable_options.return_client_request_id
            _ocp_date = job_schedule_disable_options.ocp_date
            _if_match = job_schedule_disable_options.if_match
            _if_none_match = job_schedule_disable_options.if_none_match
            _if_modified_since = job_schedule_disable_options.if_modified_since
            _if_unmodified_since = job_schedule_disable_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.disable.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    disable.metadata = {'url': '/jobschedules/{jobScheduleId}/disable'}  # type: ignore

    def enable(
        self,
        job_schedule_id,  # type: str
        job_schedule_enable_options=None,  # type: Optional["models.JobScheduleEnableOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Enables a Job Schedule.

        Enables a Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule to enable.
        :type job_schedule_id: str
        :param job_schedule_enable_options: Parameter group.
        :type job_schedule_enable_options: ~batch_service.models.JobScheduleEnableOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_enable_options is not None:
            _timeout = job_schedule_enable_options.timeout
            _client_request_id = job_schedule_enable_options.client_request_id
            _return_client_request_id = job_schedule_enable_options.return_client_request_id
            _ocp_date = job_schedule_enable_options.ocp_date
            _if_match = job_schedule_enable_options.if_match
            _if_none_match = job_schedule_enable_options.if_none_match
            _if_modified_since = job_schedule_enable_options.if_modified_since
            _if_unmodified_since = job_schedule_enable_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.enable.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    enable.metadata = {'url': '/jobschedules/{jobScheduleId}/enable'}  # type: ignore

    def terminate(
        self,
        job_schedule_id,  # type: str
        job_schedule_terminate_options=None,  # type: Optional["models.JobScheduleTerminateOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Terminates a Job Schedule.

        Terminates a Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule to terminates.
        :type job_schedule_id: str
        :param job_schedule_terminate_options: Parameter group.
        :type job_schedule_terminate_options: ~batch_service.models.JobScheduleTerminateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_terminate_options is not None:
            _timeout = job_schedule_terminate_options.timeout
            _client_request_id = job_schedule_terminate_options.client_request_id
            _return_client_request_id = job_schedule_terminate_options.return_client_request_id
            _ocp_date = job_schedule_terminate_options.ocp_date
            _if_match = job_schedule_terminate_options.if_match
            _if_none_match = job_schedule_terminate_options.if_none_match
            _if_modified_since = job_schedule_terminate_options.if_modified_since
            _if_unmodified_since = job_schedule_terminate_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.terminate.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'jobScheduleId': self._serialize.url("job_schedule_id", job_schedule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    terminate.metadata = {'url': '/jobschedules/{jobScheduleId}/terminate'}  # type: ignore

    def add(
        self,
        cloud_job_schedule,  # type: "models.JobScheduleAddParameter"
        job_schedule_add_options=None,  # type: Optional["models.JobScheduleAddOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Adds a Job Schedule to the specified Account.

        Adds a Job Schedule to the specified Account.

        :param cloud_job_schedule: The Job Schedule to be added.
        :type cloud_job_schedule: ~batch_service.models.JobScheduleAddParameter
        :param job_schedule_add_options: Parameter group.
        :type job_schedule_add_options: ~batch_service.models.JobScheduleAddOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if job_schedule_add_options is not None:
            _timeout = job_schedule_add_options.timeout
            _client_request_id = job_schedule_add_options.client_request_id
            _return_client_request_id = job_schedule_add_options.return_client_request_id
            _ocp_date = job_schedule_add_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.add.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(cloud_job_schedule, 'JobScheduleAddParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    add.metadata = {'url': '/jobschedules'}  # type: ignore

    def list(
        self,
        job_schedule_list_options=None,  # type: Optional["models.JobScheduleListOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CloudJobScheduleListResult"]
        """Lists all of the Job Schedules in the specified Account.

        Lists all of the Job Schedules in the specified Account.

        :param job_schedule_list_options: Parameter group.
        :type job_schedule_list_options: ~batch_service.models.JobScheduleListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CloudJobScheduleListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.CloudJobScheduleListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudJobScheduleListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _filter = None
        _select = None
        _expand = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if job_schedule_list_options is not None:
            _filter = job_schedule_list_options.filter
            _select = job_schedule_list_options.select
            _expand = job_schedule_list_options.expand
            _max_results = job_schedule_list_options.max_results
            _timeout = job_schedule_list_options.timeout
            _client_request_id = job_schedule_list_options.client_request_id
            _return_client_request_id = job_schedule_list_options.return_client_request_id
            _ocp_date = job_schedule_list_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if _select is not None:
                    query_parameters['$select'] = self._serialize.query("select", _select, 'str')
                if _expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", _expand, 'str')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CloudJobScheduleListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/jobschedules'}  # type: ignore
