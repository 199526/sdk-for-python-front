# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ComputeNodeOperations(object):
    """ComputeNodeOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~batch_service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def add_user(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        user,  # type: "models.ComputeNodeUser"
        compute_node_add_user_options=None,  # type: Optional["models.ComputeNodeAddUserOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Adds a user Account to the specified Compute Node.

        You can add a user Account to a Compute Node only when it is in the idle or running state.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the machine on which you want to create a user Account.
        :type node_id: str
        :param user: The user Account to be created.
        :type user: ~batch_service.models.ComputeNodeUser
        :param compute_node_add_user_options: Parameter group.
        :type compute_node_add_user_options: ~batch_service.models.ComputeNodeAddUserOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_add_user_options is not None:
            _timeout = compute_node_add_user_options.timeout
            _client_request_id = compute_node_add_user_options.client_request_id
            _return_client_request_id = compute_node_add_user_options.return_client_request_id
            _ocp_date = compute_node_add_user_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.add_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(user, 'ComputeNodeUser')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    add_user.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/users'}  # type: ignore

    def delete_user(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        user_name,  # type: str
        compute_node_delete_user_options=None,  # type: Optional["models.ComputeNodeDeleteUserOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a user Account from the specified Compute Node.

        You can delete a user Account to a Compute Node only when it is in the idle or running state.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the machine on which you want to delete a user Account.
        :type node_id: str
        :param user_name: The name of the user Account to delete.
        :type user_name: str
        :param compute_node_delete_user_options: Parameter group.
        :type compute_node_delete_user_options: ~batch_service.models.ComputeNodeDeleteUserOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_delete_user_options is not None:
            _timeout = compute_node_delete_user_options.timeout
            _client_request_id = compute_node_delete_user_options.client_request_id
            _return_client_request_id = compute_node_delete_user_options.return_client_request_id
            _ocp_date = compute_node_delete_user_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.delete_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
            'userName': self._serialize.url("user_name", user_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete_user.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/users/{userName}'}  # type: ignore

    def update_user(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        user_name,  # type: str
        node_update_user_parameter,  # type: "models.NodeUpdateUserParameter"
        compute_node_update_user_options=None,  # type: Optional["models.ComputeNodeUpdateUserOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates the password and expiration time of a user Account on the specified Compute Node.

        This operation replaces of all the updatable properties of the Account. For example, if the
        expiryTime element is not specified, the current value is replaced with the default value, not
        left unmodified. You can update a user Account on a Compute Node only when it is in the idle or
        running state.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the machine on which you want to update a user Account.
        :type node_id: str
        :param user_name: The name of the user Account to update.
        :type user_name: str
        :param node_update_user_parameter: The parameters for the request.
        :type node_update_user_parameter: ~batch_service.models.NodeUpdateUserParameter
        :param compute_node_update_user_options: Parameter group.
        :type compute_node_update_user_options: ~batch_service.models.ComputeNodeUpdateUserOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_update_user_options is not None:
            _timeout = compute_node_update_user_options.timeout
            _client_request_id = compute_node_update_user_options.client_request_id
            _return_client_request_id = compute_node_update_user_options.return_client_request_id
            _ocp_date = compute_node_update_user_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.update_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
            'userName': self._serialize.url("user_name", user_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(node_update_user_parameter, 'NodeUpdateUserParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    update_user.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/users/{userName}'}  # type: ignore

    def get(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        compute_node_get_options=None,  # type: Optional["models.ComputeNodeGetOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ComputeNode"
        """Gets information about the specified Compute Node.

        Gets information about the specified Compute Node.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node that you want to get information about.
        :type node_id: str
        :param compute_node_get_options: Parameter group.
        :type compute_node_get_options: ~batch_service.models.ComputeNodeGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ComputeNode, or the result of cls(response)
        :rtype: ~batch_service.models.ComputeNode
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ComputeNode"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _select = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_get_options is not None:
            _select = compute_node_get_options.select
            _timeout = compute_node_get_options.timeout
            _client_request_id = compute_node_get_options.client_request_id
            _return_client_request_id = compute_node_get_options.return_client_request_id
            _ocp_date = compute_node_get_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _select is not None:
            query_parameters['$select'] = self._serialize.query("select", _select, 'str')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('ComputeNode', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}'}  # type: ignore

    def reboot(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        node_reboot_parameter=None,  # type: Optional["models.NodeRebootParameter"]
        compute_node_reboot_options=None,  # type: Optional["models.ComputeNodeRebootOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Restarts the specified Compute Node.

        You can restart a Compute Node only if it is in an idle or running state.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node that you want to restart.
        :type node_id: str
        :param node_reboot_parameter: The parameters for the request.
        :type node_reboot_parameter: ~batch_service.models.NodeRebootParameter
        :param compute_node_reboot_options: Parameter group.
        :type compute_node_reboot_options: ~batch_service.models.ComputeNodeRebootOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_reboot_options is not None:
            _timeout = compute_node_reboot_options.timeout
            _client_request_id = compute_node_reboot_options.client_request_id
            _return_client_request_id = compute_node_reboot_options.return_client_request_id
            _ocp_date = compute_node_reboot_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.reboot.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if node_reboot_parameter is not None:
            body_content = self._serialize.body(node_reboot_parameter, 'NodeRebootParameter')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    reboot.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/reboot'}  # type: ignore

    def reimage(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        node_reimage_parameter=None,  # type: Optional["models.NodeReimageParameter"]
        compute_node_reimage_options=None,  # type: Optional["models.ComputeNodeReimageOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Reinstalls the operating system on the specified Compute Node.

        You can reinstall the operating system on a Compute Node only if it is in an idle or running
        state. This API can be invoked only on Pools created with the cloud service configuration
        property.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node that you want to restart.
        :type node_id: str
        :param node_reimage_parameter: The parameters for the request.
        :type node_reimage_parameter: ~batch_service.models.NodeReimageParameter
        :param compute_node_reimage_options: Parameter group.
        :type compute_node_reimage_options: ~batch_service.models.ComputeNodeReimageOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_reimage_options is not None:
            _timeout = compute_node_reimage_options.timeout
            _client_request_id = compute_node_reimage_options.client_request_id
            _return_client_request_id = compute_node_reimage_options.return_client_request_id
            _ocp_date = compute_node_reimage_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.reimage.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if node_reimage_parameter is not None:
            body_content = self._serialize.body(node_reimage_parameter, 'NodeReimageParameter')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    reimage.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/reimage'}  # type: ignore

    def disable_scheduling(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        node_disable_scheduling_parameter=None,  # type: Optional["models.NodeDisableSchedulingParameter"]
        compute_node_disable_scheduling_options=None,  # type: Optional["models.ComputeNodeDisableSchedulingOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Disables Task scheduling on the specified Compute Node.

        You can disable Task scheduling on a Compute Node only if its current scheduling state is
        enabled.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node on which you want to disable Task scheduling.
        :type node_id: str
        :param node_disable_scheduling_parameter: The parameters for the request.
        :type node_disable_scheduling_parameter: ~batch_service.models.NodeDisableSchedulingParameter
        :param compute_node_disable_scheduling_options: Parameter group.
        :type compute_node_disable_scheduling_options: ~batch_service.models.ComputeNodeDisableSchedulingOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_disable_scheduling_options is not None:
            _timeout = compute_node_disable_scheduling_options.timeout
            _client_request_id = compute_node_disable_scheduling_options.client_request_id
            _return_client_request_id = compute_node_disable_scheduling_options.return_client_request_id
            _ocp_date = compute_node_disable_scheduling_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.disable_scheduling.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if node_disable_scheduling_parameter is not None:
            body_content = self._serialize.body(node_disable_scheduling_parameter, 'NodeDisableSchedulingParameter')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    disable_scheduling.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/disablescheduling'}  # type: ignore

    def enable_scheduling(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        compute_node_enable_scheduling_options=None,  # type: Optional["models.ComputeNodeEnableSchedulingOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Enables Task scheduling on the specified Compute Node.

        You can enable Task scheduling on a Compute Node only if its current scheduling state is
        disabled.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node on which you want to enable Task scheduling.
        :type node_id: str
        :param compute_node_enable_scheduling_options: Parameter group.
        :type compute_node_enable_scheduling_options: ~batch_service.models.ComputeNodeEnableSchedulingOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_enable_scheduling_options is not None:
            _timeout = compute_node_enable_scheduling_options.timeout
            _client_request_id = compute_node_enable_scheduling_options.client_request_id
            _return_client_request_id = compute_node_enable_scheduling_options.return_client_request_id
            _ocp_date = compute_node_enable_scheduling_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.enable_scheduling.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    enable_scheduling.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/enablescheduling'}  # type: ignore

    def get_remote_login_settings(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        compute_node_get_remote_login_settings_options=None,  # type: Optional["models.ComputeNodeGetRemoteLoginSettingsOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ComputeNodeGetRemoteLoginSettingsResult"
        """Gets the settings required for remote login to a Compute Node.

        Before you can remotely login to a Compute Node using the remote login settings, you must
        create a user Account on the Compute Node. This API can be invoked only on Pools created with
        the virtual machine configuration property. For Pools created with a cloud service
        configuration, see the GetRemoteDesktop API.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node for which to obtain the remote login settings.
        :type node_id: str
        :param compute_node_get_remote_login_settings_options: Parameter group.
        :type compute_node_get_remote_login_settings_options: ~batch_service.models.ComputeNodeGetRemoteLoginSettingsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ComputeNodeGetRemoteLoginSettingsResult, or the result of cls(response)
        :rtype: ~batch_service.models.ComputeNodeGetRemoteLoginSettingsResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ComputeNodeGetRemoteLoginSettingsResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_get_remote_login_settings_options is not None:
            _timeout = compute_node_get_remote_login_settings_options.timeout
            _client_request_id = compute_node_get_remote_login_settings_options.client_request_id
            _return_client_request_id = compute_node_get_remote_login_settings_options.return_client_request_id
            _ocp_date = compute_node_get_remote_login_settings_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get_remote_login_settings.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('ComputeNodeGetRemoteLoginSettingsResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get_remote_login_settings.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/remoteloginsettings'}  # type: ignore

    def get_remote_desktop(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        compute_node_get_remote_desktop_options=None,  # type: Optional["models.ComputeNodeGetRemoteDesktopOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Gets the Remote Desktop Protocol file for the specified Compute Node.

        Before you can access a Compute Node by using the RDP file, you must create a user Account on
        the Compute Node. This API can only be invoked on Pools created with a cloud service
        configuration. For Pools created with a virtual machine configuration, see the
        GetRemoteLoginSettings API.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node for which you want to get the Remote Desktop
         Protocol file.
        :type node_id: str
        :param compute_node_get_remote_desktop_options: Parameter group.
        :type compute_node_get_remote_desktop_options: ~batch_service.models.ComputeNodeGetRemoteDesktopOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_get_remote_desktop_options is not None:
            _timeout = compute_node_get_remote_desktop_options.timeout
            _client_request_id = compute_node_get_remote_desktop_options.client_request_id
            _return_client_request_id = compute_node_get_remote_desktop_options.return_client_request_id
            _ocp_date = compute_node_get_remote_desktop_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/octet-stream, application/json"

        # Construct URL
        url = self.get_remote_desktop.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get_remote_desktop.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/rdp'}  # type: ignore

    def upload_batch_service_logs(
        self,
        pool_id,  # type: str
        node_id,  # type: str
        upload_batch_service_logs_configuration,  # type: "models.UploadBatchServiceLogsConfiguration"
        compute_node_upload_batch_service_logs_options=None,  # type: Optional["models.ComputeNodeUploadBatchServiceLogsOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.UploadBatchServiceLogsResult"
        """Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.

        This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes
        if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service
        log files should be shared with Azure support to aid in debugging issues with the Batch
        service.

        :param pool_id: The ID of the Pool that contains the Compute Node.
        :type pool_id: str
        :param node_id: The ID of the Compute Node from which you want to upload the Azure Batch
         service log files.
        :type node_id: str
        :param upload_batch_service_logs_configuration: The Azure Batch service log files upload
         configuration.
        :type upload_batch_service_logs_configuration: ~batch_service.models.UploadBatchServiceLogsConfiguration
        :param compute_node_upload_batch_service_logs_options: Parameter group.
        :type compute_node_upload_batch_service_logs_options: ~batch_service.models.ComputeNodeUploadBatchServiceLogsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UploadBatchServiceLogsResult, or the result of cls(response)
        :rtype: ~batch_service.models.UploadBatchServiceLogsResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.UploadBatchServiceLogsResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_upload_batch_service_logs_options is not None:
            _timeout = compute_node_upload_batch_service_logs_options.timeout
            _client_request_id = compute_node_upload_batch_service_logs_options.client_request_id
            _return_client_request_id = compute_node_upload_batch_service_logs_options.return_client_request_id
            _ocp_date = compute_node_upload_batch_service_logs_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.upload_batch_service_logs.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
            'nodeId': self._serialize.url("node_id", node_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(upload_batch_service_logs_configuration, 'UploadBatchServiceLogsConfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        deserialized = self._deserialize('UploadBatchServiceLogsResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    upload_batch_service_logs.metadata = {'url': '/pools/{poolId}/nodes/{nodeId}/uploadbatchservicelogs'}  # type: ignore

    def list(
        self,
        pool_id,  # type: str
        compute_node_list_options=None,  # type: Optional["models.ComputeNodeListOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.ComputeNodeListResult"]
        """Lists the Compute Nodes in the specified Pool.

        Lists the Compute Nodes in the specified Pool.

        :param pool_id: The ID of the Pool from which you want to list Compute Nodes.
        :type pool_id: str
        :param compute_node_list_options: Parameter group.
        :type compute_node_list_options: ~batch_service.models.ComputeNodeListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ComputeNodeListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.ComputeNodeListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ComputeNodeListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _filter = None
        _select = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if compute_node_list_options is not None:
            _filter = compute_node_list_options.filter
            _select = compute_node_list_options.select
            _max_results = compute_node_list_options.max_results
            _timeout = compute_node_list_options.timeout
            _client_request_id = compute_node_list_options.client_request_id
            _return_client_request_id = compute_node_list_options.return_client_request_id
            _ocp_date = compute_node_list_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'poolId': self._serialize.url("pool_id", pool_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if _select is not None:
                    query_parameters['$select'] = self._serialize.query("select", _select, 'str')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                    'poolId': self._serialize.url("pool_id", pool_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('ComputeNodeListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/pools/{poolId}/nodes'}  # type: ignore
