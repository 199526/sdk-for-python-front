# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class PoolOperations(object):
    """PoolOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~batch_service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_usage_metrics(
        self,
        pool_list_usage_metrics_options=None,  # type: Optional["models.PoolListUsageMetricsOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.PoolListUsageMetricsResult"]
        """Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.

        If you do not specify a $filter clause including a poolId, the response includes all Pools that
        existed in the Account in the time range of the returned aggregation intervals. If you do not
        specify a $filter clause including a startTime or endTime these filters default to the start
        and end times of the last aggregation interval currently available; that is, only the last
        aggregation interval is returned.

        :param pool_list_usage_metrics_options: Parameter group.
        :type pool_list_usage_metrics_options: ~batch_service.models.PoolListUsageMetricsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either PoolListUsageMetricsResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.PoolListUsageMetricsResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.PoolListUsageMetricsResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _start_time = None
        _end_time = None
        _filter = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_list_usage_metrics_options is not None:
            _start_time = pool_list_usage_metrics_options.start_time
            _end_time = pool_list_usage_metrics_options.end_time
            _filter = pool_list_usage_metrics_options.filter
            _max_results = pool_list_usage_metrics_options.max_results
            _timeout = pool_list_usage_metrics_options.timeout
            _client_request_id = pool_list_usage_metrics_options.client_request_id
            _return_client_request_id = pool_list_usage_metrics_options.return_client_request_id
            _ocp_date = pool_list_usage_metrics_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_usage_metrics.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _start_time is not None:
                    query_parameters['starttime'] = self._serialize.query("start_time", _start_time, 'iso-8601')
                if _end_time is not None:
                    query_parameters['endtime'] = self._serialize.query("end_time", _end_time, 'iso-8601')
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('PoolListUsageMetricsResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_usage_metrics.metadata = {'url': '/poolusagemetrics'}  # type: ignore

    def get_all_lifetime_statistics(
        self,
        pool_get_all_lifetime_statistics_options=None,  # type: Optional["models.PoolGetAllLifetimeStatisticsOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.PoolStatistics"
        """Gets lifetime summary statistics for all of the Pools in the specified Account.

        Statistics are aggregated across all Pools that have ever existed in the Account, from Account
        creation to the last update time of the statistics. The statistics may not be immediately
        available. The Batch service performs periodic roll-up of statistics. The typical delay is
        about 30 minutes.

        :param pool_get_all_lifetime_statistics_options: Parameter group.
        :type pool_get_all_lifetime_statistics_options: ~batch_service.models.PoolGetAllLifetimeStatisticsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PoolStatistics, or the result of cls(response)
        :rtype: ~batch_service.models.PoolStatistics
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.PoolStatistics"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_get_all_lifetime_statistics_options is not None:
            _timeout = pool_get_all_lifetime_statistics_options.timeout
            _client_request_id = pool_get_all_lifetime_statistics_options.client_request_id
            _return_client_request_id = pool_get_all_lifetime_statistics_options.return_client_request_id
            _ocp_date = pool_get_all_lifetime_statistics_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get_all_lifetime_statistics.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('PoolStatistics', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get_all_lifetime_statistics.metadata = {'url': '/lifetimepoolstats'}  # type: ignore

    def add(
        self,
        pool,  # type: "models.PoolAddParameter"
        pool_add_options=None,  # type: Optional["models.PoolAddOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Adds a Pool to the specified Account.

        When naming Pools, avoid including sensitive information such as user names or secret project
        names. This information may appear in telemetry logs accessible to Microsoft Support engineers.

        :param pool: The Pool to be added.
        :type pool: ~batch_service.models.PoolAddParameter
        :param pool_add_options: Parameter group.
        :type pool_add_options: ~batch_service.models.PoolAddOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_add_options is not None:
            _timeout = pool_add_options.timeout
            _client_request_id = pool_add_options.client_request_id
            _return_client_request_id = pool_add_options.return_client_request_id
            _ocp_date = pool_add_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.add.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(pool, 'PoolAddParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    add.metadata = {'url': '/pools'}  # type: ignore

    def list(
        self,
        pool_list_options=None,  # type: Optional["models.PoolListOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CloudPoolListResult"]
        """Lists all of the Pools in the specified Account.

        Lists all of the Pools in the specified Account.

        :param pool_list_options: Parameter group.
        :type pool_list_options: ~batch_service.models.PoolListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CloudPoolListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~batch_service.models.CloudPoolListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudPoolListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _filter = None
        _select = None
        _expand = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_list_options is not None:
            _filter = pool_list_options.filter
            _select = pool_list_options.select
            _expand = pool_list_options.expand
            _max_results = pool_list_options.max_results
            _timeout = pool_list_options.timeout
            _client_request_id = pool_list_options.client_request_id
            _return_client_request_id = pool_list_options.return_client_request_id
            _ocp_date = pool_list_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if _filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
                if _select is not None:
                    query_parameters['$select'] = self._serialize.query("select", _select, 'str')
                if _expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", _expand, 'str')
                if _max_results is not None:
                    query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
                if _timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CloudPoolListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/pools'}  # type: ignore

    def delete(
        self,
        pool_id,  # type: str
        pool_delete_options=None,  # type: Optional["models.PoolDeleteOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a Pool from the specified Account.

        When you request that a Pool be deleted, the following actions occur: the Pool state is set to
        deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts
        resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are
        terminated and requeued (as if a resize Pool operation had been requested with the default
        requeue option); finally, the Pool is removed from the system. Because running Tasks are
        requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The
        Tasks can then run on the new Pool. If you want to override the requeue behavior, then you
        should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If
        you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP
        status code 409 with error code PoolBeingDeleted.

        :param pool_id: The ID of the Pool to delete.
        :type pool_id: str
        :param pool_delete_options: Parameter group.
        :type pool_delete_options: ~batch_service.models.PoolDeleteOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_delete_options is not None:
            _timeout = pool_delete_options.timeout
            _client_request_id = pool_delete_options.client_request_id
            _return_client_request_id = pool_delete_options.return_client_request_id
            _ocp_date = pool_delete_options.ocp_date
            _if_match = pool_delete_options.if_match
            _if_none_match = pool_delete_options.if_none_match
            _if_modified_since = pool_delete_options.if_modified_since
            _if_unmodified_since = pool_delete_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete.metadata = {'url': '/pools/{poolId}'}  # type: ignore

    def exists(
        self,
        pool_id,  # type: str
        pool_exists_options=None,  # type: Optional["models.PoolExistsOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Gets basic properties of a Pool.

        :param pool_id: The ID of the Pool to get.
        :type pool_id: str
        :param pool_exists_options: Parameter group.
        :type pool_exists_options: ~batch_service.models.PoolExistsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_exists_options is not None:
            _timeout = pool_exists_options.timeout
            _client_request_id = pool_exists_options.client_request_id
            _return_client_request_id = pool_exists_options.return_client_request_id
            _ocp_date = pool_exists_options.ocp_date
            _if_match = pool_exists_options.if_match
            _if_none_match = pool_exists_options.if_none_match
            _if_modified_since = pool_exists_options.if_modified_since
            _if_unmodified_since = pool_exists_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.exists.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        if response.status_code == 200:
            response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
            response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
            response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
            response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    exists.metadata = {'url': '/pools/{poolId}'}  # type: ignore

    def get(
        self,
        pool_id,  # type: str
        pool_get_options=None,  # type: Optional["models.PoolGetOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CloudPool"
        """Gets information about the specified Pool.

        :param pool_id: The ID of the Pool to get.
        :type pool_id: str
        :param pool_get_options: Parameter group.
        :type pool_get_options: ~batch_service.models.PoolGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudPool, or the result of cls(response)
        :rtype: ~batch_service.models.CloudPool
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CloudPool"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _select = None
        _expand = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_get_options is not None:
            _select = pool_get_options.select
            _expand = pool_get_options.expand
            _timeout = pool_get_options.timeout
            _client_request_id = pool_get_options.client_request_id
            _return_client_request_id = pool_get_options.return_client_request_id
            _ocp_date = pool_get_options.ocp_date
            _if_match = pool_get_options.if_match
            _if_none_match = pool_get_options.if_none_match
            _if_modified_since = pool_get_options.if_modified_since
            _if_unmodified_since = pool_get_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _select is not None:
            query_parameters['$select'] = self._serialize.query("select", _select, 'str')
        if _expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", _expand, 'str')
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('CloudPool', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get.metadata = {'url': '/pools/{poolId}'}  # type: ignore

    def patch(
        self,
        pool_id,  # type: str
        pool_patch_parameter,  # type: "models.PoolPatchParameter"
        pool_patch_options=None,  # type: Optional["models.PoolPatchOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates the properties of the specified Pool.

        This only replaces the Pool properties specified in the request. For example, if the Pool has a
        StartTask associated with it, and a request does not specify a StartTask element, then the Pool
        keeps the existing StartTask.

        :param pool_id: The ID of the Pool to update.
        :type pool_id: str
        :param pool_patch_parameter: The parameters for the request.
        :type pool_patch_parameter: ~batch_service.models.PoolPatchParameter
        :param pool_patch_options: Parameter group.
        :type pool_patch_options: ~batch_service.models.PoolPatchOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_patch_options is not None:
            _timeout = pool_patch_options.timeout
            _client_request_id = pool_patch_options.client_request_id
            _return_client_request_id = pool_patch_options.return_client_request_id
            _ocp_date = pool_patch_options.ocp_date
            _if_match = pool_patch_options.if_match
            _if_none_match = pool_patch_options.if_none_match
            _if_modified_since = pool_patch_options.if_modified_since
            _if_unmodified_since = pool_patch_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.patch.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(pool_patch_parameter, 'PoolPatchParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    patch.metadata = {'url': '/pools/{poolId}'}  # type: ignore

    def disable_auto_scale(
        self,
        pool_id,  # type: str
        pool_disable_auto_scale_options=None,  # type: Optional["models.PoolDisableAutoScaleOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Disables automatic scaling for a Pool.

        Disables automatic scaling for a Pool.

        :param pool_id: The ID of the Pool on which to disable automatic scaling.
        :type pool_id: str
        :param pool_disable_auto_scale_options: Parameter group.
        :type pool_disable_auto_scale_options: ~batch_service.models.PoolDisableAutoScaleOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_disable_auto_scale_options is not None:
            _timeout = pool_disable_auto_scale_options.timeout
            _client_request_id = pool_disable_auto_scale_options.client_request_id
            _return_client_request_id = pool_disable_auto_scale_options.return_client_request_id
            _ocp_date = pool_disable_auto_scale_options.ocp_date
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.disable_auto_scale.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    disable_auto_scale.metadata = {'url': '/pools/{poolId}/disableautoscale'}  # type: ignore

    def enable_auto_scale(
        self,
        pool_id,  # type: str
        pool_enable_auto_scale_parameter,  # type: "models.PoolEnableAutoScaleParameter"
        pool_enable_auto_scale_options=None,  # type: Optional["models.PoolEnableAutoScaleOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Enables automatic scaling for a Pool.

        You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool.
        If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale
        formula as part of the request. If automatic scaling of the Pool is already enabled, you may
        specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for
        the same Pool more than once every 30 seconds.

        :param pool_id: The ID of the Pool on which to enable automatic scaling.
        :type pool_id: str
        :param pool_enable_auto_scale_parameter: The parameters for the request.
        :type pool_enable_auto_scale_parameter: ~batch_service.models.PoolEnableAutoScaleParameter
        :param pool_enable_auto_scale_options: Parameter group.
        :type pool_enable_auto_scale_options: ~batch_service.models.PoolEnableAutoScaleOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_enable_auto_scale_options is not None:
            _timeout = pool_enable_auto_scale_options.timeout
            _client_request_id = pool_enable_auto_scale_options.client_request_id
            _return_client_request_id = pool_enable_auto_scale_options.return_client_request_id
            _ocp_date = pool_enable_auto_scale_options.ocp_date
            _if_match = pool_enable_auto_scale_options.if_match
            _if_none_match = pool_enable_auto_scale_options.if_none_match
            _if_modified_since = pool_enable_auto_scale_options.if_modified_since
            _if_unmodified_since = pool_enable_auto_scale_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.enable_auto_scale.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(pool_enable_auto_scale_parameter, 'PoolEnableAutoScaleParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    enable_auto_scale.metadata = {'url': '/pools/{poolId}/enableautoscale'}  # type: ignore

    def evaluate_auto_scale(
        self,
        pool_id,  # type: str
        pool_evaluate_auto_scale_parameter,  # type: "models.PoolEvaluateAutoScaleParameter"
        pool_evaluate_auto_scale_options=None,  # type: Optional["models.PoolEvaluateAutoScaleOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.AutoScaleRun"
        """Gets the result of evaluating an automatic scaling formula on the Pool.

        This API is primarily for validating an autoscale formula, as it simply returns the result
        without applying the formula to the Pool. The Pool must have auto scaling enabled in order to
        evaluate a formula.

        :param pool_id: The ID of the Pool on which to evaluate the automatic scaling formula.
        :type pool_id: str
        :param pool_evaluate_auto_scale_parameter: The parameters for the request.
        :type pool_evaluate_auto_scale_parameter: ~batch_service.models.PoolEvaluateAutoScaleParameter
        :param pool_evaluate_auto_scale_options: Parameter group.
        :type pool_evaluate_auto_scale_options: ~batch_service.models.PoolEvaluateAutoScaleOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AutoScaleRun, or the result of cls(response)
        :rtype: ~batch_service.models.AutoScaleRun
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.AutoScaleRun"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_evaluate_auto_scale_options is not None:
            _timeout = pool_evaluate_auto_scale_options.timeout
            _client_request_id = pool_evaluate_auto_scale_options.client_request_id
            _return_client_request_id = pool_evaluate_auto_scale_options.return_client_request_id
            _ocp_date = pool_evaluate_auto_scale_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.evaluate_auto_scale.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(pool_evaluate_auto_scale_parameter, 'PoolEvaluateAutoScaleParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))
        deserialized = self._deserialize('AutoScaleRun', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    evaluate_auto_scale.metadata = {'url': '/pools/{poolId}/evaluateautoscale'}  # type: ignore

    def resize(
        self,
        pool_id,  # type: str
        pool_resize_parameter,  # type: "models.PoolResizeParameter"
        pool_resize_options=None,  # type: Optional["models.PoolResizeOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Changes the number of Compute Nodes that are assigned to a Pool.

        You can only resize a Pool when its allocation state is steady. If the Pool is already
        resizing, the request fails with status code 409. When you resize a Pool, the Pool's allocation
        state changes from steady to resizing. You cannot resize Pools which are configured for
        automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize
        a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific
        Compute Nodes, use the Pool remove Compute Nodes API instead.

        :param pool_id: The ID of the Pool to resize.
        :type pool_id: str
        :param pool_resize_parameter: The parameters for the request.
        :type pool_resize_parameter: ~batch_service.models.PoolResizeParameter
        :param pool_resize_options: Parameter group.
        :type pool_resize_options: ~batch_service.models.PoolResizeOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_resize_options is not None:
            _timeout = pool_resize_options.timeout
            _client_request_id = pool_resize_options.client_request_id
            _return_client_request_id = pool_resize_options.return_client_request_id
            _ocp_date = pool_resize_options.ocp_date
            _if_match = pool_resize_options.if_match
            _if_none_match = pool_resize_options.if_none_match
            _if_modified_since = pool_resize_options.if_modified_since
            _if_unmodified_since = pool_resize_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.resize.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(pool_resize_parameter, 'PoolResizeParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    resize.metadata = {'url': '/pools/{poolId}/resize'}  # type: ignore

    def stop_resize(
        self,
        pool_id,  # type: str
        pool_stop_resize_options=None,  # type: Optional["models.PoolStopResizeOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Stops an ongoing resize operation on the Pool.

        This does not restore the Pool to its previous state before the resize operation: it only stops
        any further changes being made, and the Pool maintains its current state. After stopping, the
        Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done.
        During the stop operation, the Pool allocation state changes first to stopping and then to
        steady. A resize operation need not be an explicit resize Pool request; this API can also be
        used to halt the initial sizing of the Pool when it is created.

        :param pool_id: The ID of the Pool whose resizing you want to stop.
        :type pool_id: str
        :param pool_stop_resize_options: Parameter group.
        :type pool_stop_resize_options: ~batch_service.models.PoolStopResizeOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_stop_resize_options is not None:
            _timeout = pool_stop_resize_options.timeout
            _client_request_id = pool_stop_resize_options.client_request_id
            _return_client_request_id = pool_stop_resize_options.return_client_request_id
            _ocp_date = pool_stop_resize_options.ocp_date
            _if_match = pool_stop_resize_options.if_match
            _if_none_match = pool_stop_resize_options.if_none_match
            _if_modified_since = pool_stop_resize_options.if_modified_since
            _if_unmodified_since = pool_stop_resize_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        accept = "application/json"

        # Construct URL
        url = self.stop_resize.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    stop_resize.metadata = {'url': '/pools/{poolId}/stopresize'}  # type: ignore

    def update_properties(
        self,
        pool_id,  # type: str
        pool_update_properties_parameter,  # type: "models.PoolUpdatePropertiesParameter"
        pool_update_properties_options=None,  # type: Optional["models.PoolUpdatePropertiesOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates the properties of the specified Pool.

        This fully replaces all the updatable properties of the Pool. For example, if the Pool has a
        StartTask associated with it and if StartTask is not specified with this request, then the
        Batch service will remove the existing StartTask.

        :param pool_id: The ID of the Pool to update.
        :type pool_id: str
        :param pool_update_properties_parameter: The parameters for the request.
        :type pool_update_properties_parameter: ~batch_service.models.PoolUpdatePropertiesParameter
        :param pool_update_properties_options: Parameter group.
        :type pool_update_properties_options: ~batch_service.models.PoolUpdatePropertiesOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if pool_update_properties_options is not None:
            _timeout = pool_update_properties_options.timeout
            _client_request_id = pool_update_properties_options.client_request_id
            _return_client_request_id = pool_update_properties_options.return_client_request_id
            _ocp_date = pool_update_properties_options.ocp_date
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.update_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(pool_update_properties_parameter, 'PoolUpdatePropertiesParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    update_properties.metadata = {'url': '/pools/{poolId}/updateproperties'}  # type: ignore

    def remove_nodes(
        self,
        pool_id,  # type: str
        node_remove_parameter,  # type: "models.NodeRemoveParameter"
        pool_remove_nodes_options=None,  # type: Optional["models.PoolRemoveNodesOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Removes Compute Nodes from the specified Pool.

        This operation can only run when the allocation state of the Pool is steady. When this
        operation runs, the allocation state changes from steady to resizing.

        :param pool_id: The ID of the Pool from which you want to remove Compute Nodes.
        :type pool_id: str
        :param node_remove_parameter: The parameters for the request.
        :type node_remove_parameter: ~batch_service.models.NodeRemoveParameter
        :param pool_remove_nodes_options: Parameter group.
        :type pool_remove_nodes_options: ~batch_service.models.PoolRemoveNodesOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if pool_remove_nodes_options is not None:
            _timeout = pool_remove_nodes_options.timeout
            _client_request_id = pool_remove_nodes_options.client_request_id
            _return_client_request_id = pool_remove_nodes_options.return_client_request_id
            _ocp_date = pool_remove_nodes_options.ocp_date
            _if_match = pool_remove_nodes_options.if_match
            _if_none_match = pool_remove_nodes_options.if_none_match
            _if_modified_since = pool_remove_nodes_options.if_modified_since
            _if_unmodified_since = pool_remove_nodes_options.if_unmodified_since
        api_version = "2020-09-01.12.0"
        content_type = kwargs.pop("content_type", "application/json; odata=minimalmetadata")
        accept = "application/json"

        # Construct URL
        url = self.remove_nodes.metadata['url']  # type: ignore
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'poolId': self._serialize.url("pool_id", pool_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        if _if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", _if_match, 'str')
        if _if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", _if_none_match, 'str')
        if _if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", _if_modified_since, 'rfc-1123')
        if _if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", _if_unmodified_since, 'rfc-1123')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(node_remove_parameter, 'NodeRemoveParameter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))

        if cls:
            return cls(pipeline_response, None, response_headers)

    remove_nodes.metadata = {'url': '/pools/{poolId}/removenodes'}  # type: ignore
