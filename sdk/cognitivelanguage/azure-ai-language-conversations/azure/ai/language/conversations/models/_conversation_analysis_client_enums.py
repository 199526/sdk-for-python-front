# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class CompoundOperationKind(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """(Optional) Set to 'OR' for joining metadata using 'OR' operation.
    """

    AND_ENUM = "AND"
    OR_ENUM = "OR"

class ErrorCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Human-readable error code.
    """

    INVALID_REQUEST = "InvalidRequest"
    INVALID_ARGUMENT = "InvalidArgument"
    UNAUTHORIZED = "Unauthorized"
    FORBIDDEN = "Forbidden"
    NOT_FOUND = "NotFound"
    TOO_MANY_REQUESTS = "TooManyRequests"
    INTERNAL_SERVER_ERROR = "InternalServerError"
    SERVICE_UNAVAILABLE = "ServiceUnavailable"

class InnerErrorCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Human-readable error code.
    """

    INVALID_REQUEST = "InvalidRequest"
    INVALID_PARAMETER_VALUE = "InvalidParameterValue"
    KNOWLEDGE_BASE_NOT_FOUND = "KnowledgeBaseNotFound"
    AZURE_COGNITIVE_SEARCH_NOT_FOUND = "AzureCognitiveSearchNotFound"
    AZURE_COGNITIVE_SEARCH_THROTTLING = "AzureCognitiveSearchThrottling"
    EXTRACTION_FAILURE = "ExtractionFailure"

class ProjectType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the project. It could be one of the following values.
    """

    LUIS_V2 = "luis_v2"
    LUIS_V3 = "luis_v3"
    LUIS_DEEPSTACK = "luis_deepstack"
    QUESTION_ANSWERING = "question_answering"

class RankerType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """(Optional) Set to 'QuestionOnly' for using a question only Ranker.
    """

    DEFAULT = "Default"
    QUESTION_ONLY = "QuestionOnly"
